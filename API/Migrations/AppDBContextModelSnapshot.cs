// <auto-generated />
using System;
using API.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace API.Migrations
{
    [DbContext(typeof(AppDBContext))]
    partial class AppDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("API.Models.Event", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("varchar(21)");

                    b.Property<string>("EventCreator_id")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ImageURL")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Place_id")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("User_id")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("last_login")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("updated_at")
                        .HasColumnType("datetime(6)");

                    b.HasKey("id");

                    b.ToTable("Events");

                    b.HasDiscriminator().HasValue("Event");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("API.Models.Participant", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Eventid")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("User_FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("User_LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("User_id")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("id");

                    b.HasIndex("Eventid");

                    b.ToTable("Participant");
                });

            modelBuilder.Entity("API.Models.User", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FirstName")
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .HasColumnType("longtext");

                    b.Property<string>("PasswordBackdoor")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("last_login")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("updated_at")
                        .HasColumnType("datetime(6)");

                    b.HasKey("id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("API.Models.OrganizedEvent", b =>
                {
                    b.HasBaseType("API.Models.Event");

                    b.Property<string>("EventCreatorid")
                        .HasColumnType("varchar(255)");

                    b.HasIndex("EventCreatorid");

                    b.HasDiscriminator().HasValue("OrganizedEvent");
                });

            modelBuilder.Entity("API.Models.ParticipatedEvent", b =>
                {
                    b.HasBaseType("API.Models.Event");

                    b.Property<string>("EventCreatorid")
                        .HasColumnType("varchar(255)");

                    b.HasIndex("EventCreatorid");

                    b.ToTable("Events", t =>
                        {
                            t.Property("EventCreatorid")
                                .HasColumnName("ParticipatedEvent_EventCreatorid");
                        });

                    b.HasDiscriminator().HasValue("ParticipatedEvent");
                });

            modelBuilder.Entity("API.Models.Participant", b =>
                {
                    b.HasOne("API.Models.Event", null)
                        .WithMany("Participants")
                        .HasForeignKey("Eventid");
                });

            modelBuilder.Entity("API.Models.OrganizedEvent", b =>
                {
                    b.HasOne("API.Models.User", "EventCreator")
                        .WithMany("OrganizedEvents")
                        .HasForeignKey("EventCreatorid");

                    b.Navigation("EventCreator");
                });

            modelBuilder.Entity("API.Models.ParticipatedEvent", b =>
                {
                    b.HasOne("API.Models.User", "EventCreator")
                        .WithMany("ParticipatedEvents")
                        .HasForeignKey("EventCreatorid");

                    b.Navigation("EventCreator");
                });

            modelBuilder.Entity("API.Models.Event", b =>
                {
                    b.Navigation("Participants");
                });

            modelBuilder.Entity("API.Models.User", b =>
                {
                    b.Navigation("OrganizedEvents");

                    b.Navigation("ParticipatedEvents");
                });
#pragma warning restore 612, 618
        }
    }
}
